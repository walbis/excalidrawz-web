// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  workspaces    WorkspaceMember[]
  files         File[]
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?

  members     WorkspaceMember[]
  groups      Group[]
  invitations WorkspaceInvitation[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  role        Role     @default(MEMBER)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  createdAt   DateTime  @default(now())

  @@unique([workspaceId, userId])
}

model WorkspaceInvitation {
  id          String   @id @default(cuid())
  email       String
  role        Role     @default(MEMBER)
  token       String   @unique

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime  @default(now())
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Group {
  id          String   @id @default(cuid())
  name        String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  parent      Group?   @relation("GroupHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    Group[]  @relation("GroupHierarchy")

  files       File[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id          String   @id @default(cuid())
  name        String
  content     Json     // Excalidraw JSON data

  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String

  checkpoints FileCheckpoint[]

  inTrash     Boolean  @default(false)
  deletedAt   DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([groupId])
  @@index([authorId])
}

model FileCheckpoint {
  id        String   @id @default(cuid())
  content   Json     // Excalidraw JSON snapshot

  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String

  createdAt DateTime @default(now())

  @@index([fileId])
}
